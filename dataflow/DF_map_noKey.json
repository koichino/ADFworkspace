{
	"name": "DF_map_noKey",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MapInput",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CallMaps",
					"linkedService": {
						"referenceName": "RestBingMapswithoutKey",
						"type": "LinkedServiceReference"
					}
				},
				{
					"name": "createURL"
				}
			],
			"scriptLines": [
				"parameters{",
				"     KEY as string ('?c=ja&key=Am6zrDIkuzOe6VyjqirHzICQ8p_cGVuNojoegQk17nONYFRck3vydwczeYWxvbyA')",
				"}",
				"source(output(",
				"          latitude as string,",
				"          longitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"createURL call(mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false,",
				"     output(",
				"          headers as [string,string],",
				"          body as (authenticationResultCode as string, brandLogoUri as string, copyright as string, resourceSets as (estimatedTotal as integer, resources as (aaa as string, bbox as integer[], name as string))),",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     format: 'rest',",
				"     store: 'restservice',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     httpMethod: 'GET',",
				"     rowRelativeUrl: 'location',",
				"     skipRowRelativeUrl: true,",
				"     headerColumnName: 'headers',",
				"     bodyColumnName: 'body',",
				"     statusColumnName: 'status',",
				"     addResponseCode: true,",
				"     requestFormat: ['type' -> 'json'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> CallMaps",
				"source1 derive(location = concat('/',latitude,',',longitude,$KEY)) ~> createURL",
				"CallMaps sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}